// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_monad_dapp/test/viewmodels/transfer_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_monad_dapp/models/transaction.dart' as _i8;
import 'package:flutter_monad_dapp/models/wallet_state.dart' as _i2;
import 'package:flutter_monad_dapp/services/wallet_service.dart' as _i4;
import 'package:flutter_monad_dapp/services/web3_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:web3dart/web3dart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalletState_0 extends _i1.SmartFake implements _i2.WalletState {
  _FakeWalletState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeb3Client_1 extends _i1.SmartFake implements _i3.Web3Client {
  _FakeWeb3Client_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEtherAmount_2 extends _i1.SmartFake implements _i3.EtherAmount {
  _FakeEtherAmount_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WalletService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletService extends _i1.Mock implements _i4.WalletService {
  MockWalletService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.WalletState> get connectionStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStream),
            returnValue: _i5.Stream<_i2.WalletState>.empty(),
          )
          as _i5.Stream<_i2.WalletState>);

  @override
  _i2.WalletState get currentState =>
      (super.noSuchMethod(
            Invocation.getter(#currentState),
            returnValue: _FakeWalletState_0(
              this,
              Invocation.getter(#currentState),
            ),
          )
          as _i2.WalletState);

  @override
  _i5.Future<bool> connectWallet() =>
      (super.noSuchMethod(
            Invocation.method(#connectWallet, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> disconnectWallet() =>
      (super.noSuchMethod(
            Invocation.method(#disconnectWallet, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.EthereumAddress?> getConnectedAddress() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectedAddress, []),
            returnValue: _i5.Future<_i3.EthereumAddress?>.value(),
          )
          as _i5.Future<_i3.EthereumAddress?>);

  @override
  _i5.Future<void> updateBalance(_i3.EtherAmount? newBalance) =>
      (super.noSuchMethod(
            Invocation.method(#updateBalance, [newBalance]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Web3Service].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeb3Service extends _i1.Mock implements _i6.Web3Service {
  MockWeb3Service() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Web3Client> getClient() =>
      (super.noSuchMethod(
            Invocation.method(#getClient, []),
            returnValue: _i5.Future<_i3.Web3Client>.value(
              _FakeWeb3Client_1(this, Invocation.method(#getClient, [])),
            ),
          )
          as _i5.Future<_i3.Web3Client>);

  @override
  _i5.Future<_i3.EtherAmount> getBalance(_i3.EthereumAddress? address) =>
      (super.noSuchMethod(
            Invocation.method(#getBalance, [address]),
            returnValue: _i5.Future<_i3.EtherAmount>.value(
              _FakeEtherAmount_2(
                this,
                Invocation.method(#getBalance, [address]),
              ),
            ),
          )
          as _i5.Future<_i3.EtherAmount>);

  @override
  _i5.Future<String> sendTransaction({
    required _i3.EthereumAddress? from,
    required _i3.EthereumAddress? to,
    required _i3.EtherAmount? value,
    required _i3.Credentials? credentials,
    BigInt? gasPrice,
    int? gasLimit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendTransaction, [], {
              #from: from,
              #to: to,
              #value: value,
              #credentials: credentials,
              #gasPrice: gasPrice,
              #gasLimit: gasLimit,
            }),
            returnValue: _i5.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#sendTransaction, [], {
                  #from: from,
                  #to: to,
                  #value: value,
                  #credentials: credentials,
                  #gasPrice: gasPrice,
                  #gasLimit: gasLimit,
                }),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<List<_i8.Transaction>> getTransactionHistory(
    _i3.EthereumAddress? address, {
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getTransactionHistory,
              [address],
              {#limit: limit},
            ),
            returnValue: _i5.Future<List<_i8.Transaction>>.value(
              <_i8.Transaction>[],
            ),
          )
          as _i5.Future<List<_i8.Transaction>>);

  @override
  _i5.Future<_i8.Transaction?> getTransactionByHash(String? hash) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionByHash, [hash]),
            returnValue: _i5.Future<_i8.Transaction?>.value(),
          )
          as _i5.Future<_i8.Transaction?>);

  @override
  _i5.Future<BigInt> estimateGas({
    required _i3.EthereumAddress? from,
    required _i3.EthereumAddress? to,
    required _i3.EtherAmount? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#estimateGas, [], {
              #from: from,
              #to: to,
              #value: value,
            }),
            returnValue: _i5.Future<BigInt>.value(
              _i7.dummyValue<BigInt>(
                this,
                Invocation.method(#estimateGas, [], {
                  #from: from,
                  #to: to,
                  #value: value,
                }),
              ),
            ),
          )
          as _i5.Future<BigInt>);

  @override
  _i5.Future<_i3.EtherAmount> getGasPrice() =>
      (super.noSuchMethod(
            Invocation.method(#getGasPrice, []),
            returnValue: _i5.Future<_i3.EtherAmount>.value(
              _FakeEtherAmount_2(this, Invocation.method(#getGasPrice, [])),
            ),
          )
          as _i5.Future<_i3.EtherAmount>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
